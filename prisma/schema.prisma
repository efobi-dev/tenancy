generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider  = "zod-prisma"
  output    = "./zod"
  modelCase = "camelCase"
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  first_name     String
  last_name      String
  hashedPassword String?
  googleId       String?   @unique
  phone          String?
  avatar         String?
  customer_code  String?   @unique
  bankName       String?
  accountNumber  String?
  accountName    String?
  bvnNumber      String?   @unique // For verification
  idType         IDType?
  idNumber       String?
  isVerified     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role
  landlord       Landlord? @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  landlordId     String?
  tenant         Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId       String?

  // Communication
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  Session          Session[]
}

model Landlord {
  id              String           @id @default(cuid())
  properties      Property[]
  maintenanceJobs MaintenanceJob[]
  User            User[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Tenant {
  id              String           @id @default(cuid())
  occupation      String?
  employer        String?
  leases          Lease[]
  maintenanceJobs MaintenanceJob[]
  User            User[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Property {
  id          String       @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  type        PropertyType
  description String?
  landlord    Landlord     @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  landlordId  String
  units       Unit[]
  images      Image[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([landlordId])
}

model Unit {
  id         String     @id @default(cuid())
  unitNumber String
  property   Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  type       UnitType
  rentAmount Float
  status     UnitStatus @default(VACANT)
  features   String?
  leases     Lease[]
  documents  Document[]
  images     Image[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([propertyId])
}

model Lease {
  id              String      @id @default(cuid())
  unit            Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId          String
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId        String
  startDate       DateTime
  endDate         DateTime
  rentAmount      Float
  securityDeposit Float
  rentPayments    Payment[]
  status          LeaseStatus @default(ACTIVE)
  documents       Document[]
  images          Image[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([unitId])
  @@index([tenantId])
}

model Payment {
  id          String        @id @default(cuid())
  lease       Lease         @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId     String
  amount      Float
  paymentDate DateTime
  dueDate     DateTime
  status      PaymentStatus @default(PENDING)
  paymentType PaymentType
  reference   String? // Payment reference number
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([leaseId])
}

model MaintenanceJob {
  id          String              @id @default(cuid())
  tenant      Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  landlord    Landlord            @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  landlordId  String
  title       String
  description String
  priority    MaintenancePriority
  status      MaintenanceStatus   @default(PENDING)
  images      Image[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@index([tenantId])
  @@index([landlordId])
}

model Message {
  id         String   @id @default(cuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([senderId])
  @@index([receiverId])
}

model Document {
  id        String       @id @default(cuid())
  name      String
  type      DocumentType
  url       String
  unit      Unit?        @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId    String?
  lease     Lease?       @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([unitId])
  @@index([leaseId])
}

model Image {
  id               String          @id @default(cuid())
  url              String
  caption          String?
  property         Property?       @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId       String?
  unit             Unit?           @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId           String?
  lease            Lease?          @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId          String?
  maintenanceJob   MaintenanceJob? @relation(fields: [maintenanceJobId], references: [id], onDelete: Cascade)
  maintenanceJobId String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([propertyId])
  @@index([unitId])
  @@index([leaseId])
  @@index([maintenanceJobId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model Bank {
  id       Int    @id
  name     String
  code     String
  longcode String
}

enum Role {
  ADMIN
  LANDLORD
  TENANT
}

enum IDType {
  NATIONAL_ID
  DRIVERS_LICENSE
  VOTERS_CARD
  INTERNATIONAL_PASSPORT
}

enum PropertyType {
  APARTMENT
  HOUSE
  DUPLEX
  COMMERCIAL
  LAND
}

enum UnitType {
  STUDIO
  ONE_BEDROOM
  TWO_BEDROOM
  THREE_BEDROOM
  FOUR_BEDROOM
  COMMERCIAL_SPACE
}

enum UnitStatus {
  VACANT
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  OVERDUE
}

enum PaymentType {
  BANK_TRANSFER
  CASH
  CARD
  USSD
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DocumentType {
  LEASE_AGREEMENT
  INSPECTION_REPORT
  PAYMENT_RECEIPT
  ID_DOCUMENT
  OTHER
}
